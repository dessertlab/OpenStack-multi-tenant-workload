
import random, binascii, threading, os, time

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None

def pycc_sleep(milliseconds):
    time.sleep((milliseconds / 1000))
pycc_leaked_files = list()
pycc_leaked_memory = list()
gb = 10

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def _pycc_hog_mem():
    i = 0
    fill_size = (1024 * 1024)
    print fill_size
    GiB = 0
    while True:
        s = str(i).zfill(fill_size)
        pycc_leaked_memory.append(s)
        i += 1
        if ((i % 1024) == 0):
            GiB += 1
            if (GiB >= gb):
                return

def pycc_hog(resource, async=False, arg=None):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    elif (resource == 'mem'):
        f = _pycc_hog_mem
        gb = int(arg)
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
import copy
from oslo_log import log as logging
from oslo_serialization import jsonutils
from oslo_utils import uuidutils
from oslo_utils import versionutils
import six
from nova import db
from nova import exception
from nova import objects
from nova.objects import base
from nova.objects import fields
LOG = logging.getLogger(__name__)

def compare_pci_device_attributes(obj_a, obj_b):
    if (not isinstance(obj_b, PciDevice)):
        return False
    pci_ignore_fields = base.NovaPersistentObject.fields.keys()
    for name in obj_a.obj_fields:
        if (name in pci_ignore_fields):
            continue
        is_set_a = obj_a.obj_attr_is_set(name)
        is_set_b = obj_b.obj_attr_is_set(name)
        if (is_set_a != is_set_b):
            return False
        if is_set_a:
            if (getattr(obj_a, name) != getattr(obj_b, name)):
                return False
    return True

@base.NovaObjectRegistry.register
class PciDevice(base.NovaPersistentObject, base.NovaObject, ):
    "Object to represent a PCI device on a compute node.\n\n    PCI devices are managed by the compute resource tracker, which discovers\n    the devices from the hardware platform, claims, allocates and frees\n    devices for instances.\n\n    The PCI device information is permanently maintained in a database.\n    This makes it convenient to get PCI device information, like physical\n    function for a VF device, adjacent switch IP address for a NIC,\n    hypervisor identification for a PCI device, etc. It also provides a\n    convenient way to check device allocation information for administrator\n    purposes.\n\n    A device can be in available/claimed/allocated/deleted/removed state.\n\n    A device is available when it is discovered..\n\n    A device is claimed prior to being allocated to an instance. Normally the\n    transition from claimed to allocated is quick. However, during a resize\n    operation the transition can take longer, because devices are claimed in\n    prep_resize and allocated in finish_resize.\n\n    A device becomes removed when hot removed from a node (i.e. not found in\n    the next auto-discover) but not yet synced with the DB. A removed device\n    should not be allocated to any instance, and once deleted from the DB,\n    the device object is changed to deleted state and no longer synced with\n    the DB.\n\n    Filed notes::\n\n        | 'dev_id':\n        |   Hypervisor's identification for the device, the string format\n        |   is hypervisor specific\n        | 'extra_info':\n        |   Device-specific properties like PF address, switch ip address etc.\n\n    "
    VERSION = '1.6'
    fields = {'id': fields.IntegerField(), 'uuid': fields.UUIDField(), 'compute_node_id': fields.IntegerField(nullable=True), 'address': fields.StringField(), 'vendor_id': fields.StringField(), 'product_id': fields.StringField(), 'dev_type': fields.PciDeviceTypeField(), 'status': fields.PciDeviceStatusField(), 'dev_id': fields.StringField(nullable=True), 'label': fields.StringField(nullable=True), 'instance_uuid': fields.StringField(nullable=True), 'request_id': fields.StringField(nullable=True), 'extra_info': fields.DictOfStringsField(), 'numa_node': fields.IntegerField(nullable=True), 'parent_addr': fields.StringField(nullable=True)}

    def obj_make_compatible(self, primitive, target_version):
        target_version = versionutils.convert_version_to_tuple(target_version)
        if ((target_version < (1, 2)) and ('request_id' in primitive)):
            del primitive['request_id']
        if ((target_version < (1, 4)) and ('parent_addr' in primitive)):
            if (primitive['parent_addr'] is not None):
                extra_info = primitive.get('extra_info', {})
                extra_info['phys_function'] = primitive['parent_addr']
            del primitive['parent_addr']
        if ((target_version < (1, 5)) and ('parent_addr' in primitive)):
            added_statuses = (fields.PciDeviceStatus.UNCLAIMABLE, fields.PciDeviceStatus.UNAVAILABLE)
            status = primitive['status']
            if (status in added_statuses):
                raise exception.ObjectActionError(action='obj_make_compatible', reason=('status=%s not supported in version %s' % (status, target_version)))
        if ((target_version < (1, 6)) and ('uuid' in primitive)):
            del primitive['uuid']

    def update_device(self, dev_dict):
        'Sync the content from device dictionary to device object.\n\n        The resource tracker updates the available devices periodically.\n        To avoid meaningless syncs with the database, we update the device\n        object only if a value changed.\n        '
        no_changes = ('status', 'instance_uuid', 'id', 'extra_info')
        for key in no_changes:
            dev_dict.pop(key, None)
        dev_dict.setdefault('parent_addr')
        for (k, v) in dev_dict.items():
            if (k in self.fields.keys()):
                setattr(self, k, v)
            else:
                extra_info = self.extra_info
                data = (v if isinstance(v, six.string_types) else jsonutils.dumps(v))
                extra_info.update({k: data})
                self.extra_info = extra_info

    def __init__(self, *args, **kwargs):
        super(PciDevice, self).__init__(*args, **kwargs)
        self.obj_reset_changes()
        self.extra_info = {}
        self.parent_device = None
        self.child_devices = []

    def __eq__(self, other):
        return compare_pci_device_attributes(self, other)

    def __ne__(self, other):
        return (not (self == other))

    @staticmethod
    def _from_db_object(context, pci_device, db_dev):
        for key in pci_device.fields:
            if ((key == 'uuid') and (db_dev['uuid'] is None)):
                continue
            elif (key != 'extra_info'):
                setattr(pci_device, key, db_dev[key])
            else:
                extra_info = db_dev.get('extra_info')
                pci_device.extra_info = jsonutils.loads(extra_info)
        pci_device._context = context
        pci_device.obj_reset_changes()
        if (db_dev['uuid'] is None):
            pci_device.uuid = uuidutils.generate_uuid()
            pci_device.save()
        return pci_device

    @base.remotable_classmethod
    def get_by_dev_addr(cls, context, compute_node_id, dev_addr):
        db_dev = db.pci_device_get_by_addr(context, compute_node_id, dev_addr)
        return cls._from_db_object(context, cls(), db_dev)

    @base.remotable_classmethod
    def get_by_dev_id(cls, context, id):
        db_dev = db.pci_device_get_by_id(context, id)
        return cls._from_db_object(context, cls(), db_dev)

    @classmethod
    def create(cls, context, dev_dict):
        'Create a PCI device based on hypervisor information.\n\n        As the device object is just created and is not synced with db yet\n        thus we should not reset changes here for fields from dict.\n        '
        pci_device = cls()
        pci_device.update_device(dev_dict)
        pci_device.status = fields.PciDeviceStatus.AVAILABLE
        pci_device.uuid = uuidutils.generate_uuid()
        pci_device._context = context
        return pci_device

    @base.remotable
    def save(self):
        if (self.status == fields.PciDeviceStatus.REMOVED):
            self.status = fields.PciDeviceStatus.DELETED
            db.pci_device_destroy(self._context, self.compute_node_id, self.address)
        elif (self.status != fields.PciDeviceStatus.DELETED):
            if ('uuid' not in self):
                self.uuid = uuidutils.generate_uuid()
            updates = self.obj_get_changes()
            updates['extra_info'] = self.extra_info
            if ('extra_info' in updates):
                updates['extra_info'] = jsonutils.dumps(updates['extra_info'])
            if updates:
                db_pci = db.pci_device_update(self._context, self.compute_node_id, self.address, updates)
                self._from_db_object(self._context, self, db_pci)

    @staticmethod
    def _bulk_update_status(dev_list, status):
        for dev in dev_list:
            dev.status = status

    def claim(self, instance_uuid):
        if (self.status != fields.PciDeviceStatus.AVAILABLE):
            raise exception.PciDeviceInvalidStatus(compute_node_id=self.compute_node_id, address=self.address, status=self.status, hopestatus=[fields.PciDeviceStatus.AVAILABLE])
        if (self.dev_type == fields.PciDeviceType.SRIOV_PF):
            vfs_list = self.child_devices
            if (not all([vf.is_available() for vf in vfs_list])):
                raise exception.PciDeviceVFInvalidStatus(compute_node_id=self.compute_node_id, address=self.address)
            self._bulk_update_status(vfs_list, fields.PciDeviceStatus.UNCLAIMABLE)
        elif (self.dev_type == fields.PciDeviceType.SRIOV_VF):
            parent_ok_statuses = (fields.PciDeviceStatus.AVAILABLE, fields.PciDeviceStatus.UNCLAIMABLE, fields.PciDeviceStatus.UNAVAILABLE)
            parent = self.parent_device
            if parent:
                if (parent.status not in parent_ok_statuses):
                    raise exception.PciDevicePFInvalidStatus(compute_node_id=self.compute_node_id, address=self.parent_addr, status=self.status, vf_address=self.address, hopestatus=parent_ok_statuses)
                if (parent.status == fields.PciDeviceStatus.AVAILABLE):
                    parent.status = fields.PciDeviceStatus.UNCLAIMABLE
            else:
                LOG.debug('Physical function addr: %(pf_addr)s parent of VF addr: %(vf_addr)s was not found', {'pf_addr': self.parent_addr, 'vf_addr': self.address})
        self.status = fields.PciDeviceStatus.CLAIMED
        self.instance_uuid = instance_uuid

    def allocate(self, instance):
        ok_statuses = (fields.PciDeviceStatus.AVAILABLE, fields.PciDeviceStatus.CLAIMED)
        parent_ok_statuses = (fields.PciDeviceStatus.AVAILABLE, fields.PciDeviceStatus.UNCLAIMABLE, fields.PciDeviceStatus.UNAVAILABLE)
        dependants_ok_statuses = (fields.PciDeviceStatus.AVAILABLE, fields.PciDeviceStatus.UNCLAIMABLE)
        if (self.status not in ok_statuses):
            raise exception.PciDeviceInvalidStatus(compute_node_id=self.compute_node_id, address=self.address, status=self.status, hopestatus=ok_statuses)
        if ((self.status == fields.PciDeviceStatus.CLAIMED) and (self.instance_uuid != instance['uuid'])):
            raise exception.PciDeviceInvalidOwner(compute_node_id=self.compute_node_id, address=self.address, owner=self.instance_uuid, hopeowner=instance['uuid'])
        if (self.dev_type == fields.PciDeviceType.SRIOV_PF):
            vfs_list = self.child_devices
            if (not all([(vf.status in dependants_ok_statuses) for vf in vfs_list])):
                raise exception.PciDeviceVFInvalidStatus(compute_node_id=self.compute_node_id, address=self.address)
            self._bulk_update_status(vfs_list, fields.PciDeviceStatus.UNAVAILABLE)
        elif (self.dev_type == fields.PciDeviceType.SRIOV_VF):
            parent = self.parent_device
            if parent:
                if (parent.status not in parent_ok_statuses):
                    raise exception.PciDevicePFInvalidStatus(compute_node_id=self.compute_node_id, address=self.parent_addr, status=self.status, vf_address=self.address, hopestatus=parent_ok_statuses)
                parent.status = fields.PciDeviceStatus.UNAVAILABLE
            else:
                LOG.debug('Physical function addr: %(pf_addr)s parent of VF addr: %(vf_addr)s was not found', {'pf_addr': self.parent_addr, 'vf_addr': self.address})
        self.status = fields.PciDeviceStatus.ALLOCATED
        self.instance_uuid = instance['uuid']
        if isinstance(instance, dict):
            if ('pci_devices' not in instance):
                instance['pci_devices'] = []
            instance['pci_devices'].append(copy.copy(self))
        else:
            instance.pci_devices.objects.append(copy.copy(self))

    def remove(self):
        if (self.status != fields.PciDeviceStatus.AVAILABLE):
            raise exception.PciDeviceInvalidStatus(compute_node_id=self.compute_node_id, address=self.address, status=self.status, hopestatus=[fields.PciDeviceStatus.AVAILABLE])
        self.status = fields.PciDeviceStatus.REMOVED
        self.instance_uuid = None
        self.request_id = None

    def free(self, instance=None):
        ok_statuses = (fields.PciDeviceStatus.ALLOCATED, fields.PciDeviceStatus.CLAIMED)
        free_devs = []
        if (self.status not in ok_statuses):
            raise exception.PciDeviceInvalidStatus(compute_node_id=self.compute_node_id, address=self.address, status=self.status, hopestatus=ok_statuses)
        if (instance and (self.instance_uuid != instance['uuid'])):
            raise exception.PciDeviceInvalidOwner(compute_node_id=self.compute_node_id, address=self.address, owner=self.instance_uuid, hopeowner=instance['uuid'])
        if (self.dev_type == fields.PciDeviceType.SRIOV_PF):
            vfs_list = self.child_devices
            self._bulk_update_status(vfs_list, fields.PciDeviceStatus.AVAILABLE)
            free_devs.extend(vfs_list)
        if (self.dev_type == fields.PciDeviceType.SRIOV_VF):
            parent = self.parent_device
            if (not parent):
                LOG.debug('Physical function addr: %(pf_addr)s parent of VF addr: %(vf_addr)s was not found', {'pf_addr': self.parent_addr, 'vf_addr': self.address})
            else:
                vfs_list = parent.child_devices
                if all([vf.is_available() for vf in vfs_list if (vf.id != self.id)]):
                    parent.status = fields.PciDeviceStatus.AVAILABLE
                    free_devs.append(parent)
        old_status = self.status
        self.status = fields.PciDeviceStatus.AVAILABLE
        free_devs.append(self)
        self.instance_uuid = None
        self.request_id = None
        if ((old_status == fields.PciDeviceStatus.ALLOCATED) and instance):
            existed = next((dev for dev in instance['pci_devices'] if (dev.id == self.id)))
            if isinstance(instance, dict):
                instance['pci_devices'].remove(existed)
            else:
                instance.pci_devices.objects.remove(existed)
        return free_devs

    def is_available(self):
        return (self.status == fields.PciDeviceStatus.AVAILABLE)

@base.NovaObjectRegistry.register
class PciDeviceList(base.ObjectListBase, base.NovaObject, ):
    VERSION = '1.3'
    fields = {'objects': fields.ListOfObjectsField('PciDevice')}

    def __init__(self, *args, **kwargs):
        super(PciDeviceList, self).__init__(*args, **kwargs)
        if ('objects' not in kwargs):
            self.objects = []
            self.obj_reset_changes()

    @base.remotable_classmethod
    def get_by_compute_node(cls, context, node_id):
        db_dev_list = db.pci_device_get_all_by_node(context, node_id)
        return base.obj_make_list(context, cls(context), objects.PciDevice, db_dev_list)

    @base.remotable_classmethod
    def get_by_instance_uuid(cls, context, uuid):
        db_dev_list = db.pci_device_get_all_by_instance_uuid(context, uuid)
        return pycc_corrupt(base.obj_make_list(context, cls(context), objects.PciDevice, db_dev_list))

    @base.remotable_classmethod
    def get_by_parent_address(cls, context, node_id, parent_addr):
        db_dev_list = db.pci_device_get_all_by_parent_addr(context, node_id, parent_addr)
        return base.obj_make_list(context, cls(context), objects.PciDevice, db_dev_list)
