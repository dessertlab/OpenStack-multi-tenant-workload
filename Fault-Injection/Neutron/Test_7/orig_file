
import abc
from oslo_config import cfg
from oslo_log import log
import six
from neutron.ipam import requests as ipam_req
from neutron import manager
LOG = log.getLogger(__name__)

@six.add_metaclass(abc.ABCMeta)
class Pool(object, ):
    'Interface definition for an IPAM driver.\n\n    There should be an instance of the driver for every subnet pool.\n    '

    def __init__(self, subnetpool, context):
        'Initialize pool\n\n        :param subnetpool: SubnetPool of the address space to use.\n        :type subnetpool: dict\n        '
        self._subnetpool = subnetpool
        self._context = context

    @classmethod
    def get_instance(cls, subnet_pool, context):
        'Returns an instance of the configured IPAM driver\n\n        :param subnet_pool: Subnet pool of the address space to use.\n        :type subnet_pool: dict\n        :returns: An instance of Driver for the given subnet pool\n        '
        ipam_driver_name = cfg.CONF.ipam_driver
        mgr = manager.NeutronManager
        driver_class = mgr.load_class_for_provider('neutron.ipam_drivers', ipam_driver_name)
        return driver_class(subnet_pool, context)

    @abc.abstractmethod
    def allocate_subnet(self, request):
        'Allocates a subnet based on the subnet request\n\n        :param request: Describes the allocation requested.\n        :type request: An instance of a sub-class of SubnetRequest\n        :returns: An instance of Subnet\n        :raises: RequestNotSupported, IPAMAlreadyAllocated\n        '

    @abc.abstractmethod
    def get_subnet(self, subnet_id):
        'Gets the matching subnet if it has been allocated\n\n        :param subnet_id: the subnet identifier\n        :type subnet_id: str uuid\n        :returns: An instance of IPAM Subnet\n        :raises: IPAMAllocationNotFound\n        '

    @abc.abstractmethod
    def update_subnet(self, request):
        'Updates an already allocated subnet\n\n        This is used to notify the external IPAM system of updates to a subnet.\n\n        :param request: Update the subnet to match this request\n        :type request: An instance of a sub-class of SpecificSubnetRequest\n        :returns: An instance of IPAM Subnet\n        :raises: RequestNotSupported, IPAMAllocationNotFound\n        '

    @abc.abstractmethod
    def remove_subnet(self, subnet_id):
        'Removes an allocation\n\n        The initial reference implementation will probably do nothing.\n\n        :param subnet_id: the subnet identifier\n        :type subnet_id: str uuid\n        :raises: IPAMAllocationNotFound\n        '

    def get_subnet_request_factory(self):
        'Returns default SubnetRequestFactory\n\n        Can be overridden on driver level to return custom factory\n        '
        return ipam_req.SubnetRequestFactory

    def get_address_request_factory(self):
        'Returns default AddressRequestFactory\n\n        Can be overridden on driver level to return custom factory\n        '
        return ipam_req.AddressRequestFactory

    @abc.abstractmethod
    def get_allocator(self, subnet_ids):
        'Gets an allocator for subnets passed in\n\n        :param subnet_ids: ids for subnets from which the IP can be allocated\n        :returns: An instance of IPAM SubnetGroup\n        :raises: TODO(Carl) What sort of errors do we need to plan for?\n        '

    def needs_rollback(self):
        'Whether driver needs an explicit rollback when operations fail.\n\n        A driver that (de)allocates resources in the same DB transaction passed\n        to it by Neutron will not want explicit rollback. A truly external IPAM\n        system would need to return True for sure. The default is True since\n        all drivers were assumed to be designed to need it from the start.\n\n        :returns: True if driver needs to be called on rollback\n        '
        return True

@six.add_metaclass(abc.ABCMeta)
class Subnet(object, ):
    'Interface definition for an IPAM subnet\n\n    A subnet would typically be associated with a network but may not be.  It\n    could represent a dynamically routed IP address space in which case the\n    normal network and broadcast addresses would be useable.  It should always\n    be a routable block of addresses and representable in CIDR notation.\n    '

    @abc.abstractmethod
    def allocate(self, address_request):
        'Allocates an IP address based on the request passed in\n\n        :param address_request: Specifies what to allocate.\n        :type address_request: An instance of a subclass of AddressRequest\n        :returns: A netaddr.IPAddress\n        :raises: AddressNotAvailable, AddressOutsideAllocationPool,\n            AddressOutsideSubnet\n        '

    @abc.abstractmethod
    def deallocate(self, address):
        'Returns a previously allocated address to the pool\n\n        :param address: The address to give back.\n        :type address: A netaddr.IPAddress or convertible to one.\n        :returns: None\n        :raises: IPAMAllocationNotFound\n        '

    @abc.abstractmethod
    def get_details(self):
        'Returns the details of the subnet\n\n        :returns: An instance of SpecificSubnetRequest with the subnet detail.\n        '

@six.add_metaclass(abc.ABCMeta)
class SubnetGroup(object, ):
    "Interface definition for a filtered group of IPAM Subnets\n\n    Allocates from a group of semantically equivalent subnets.  The list of\n    candidate subnets *may* be ordered by preference but all of the subnets\n    must be suitable for fulfilling the request.  For example, all of them must\n    be associated with the network we're trying to allocate an address for.\n    "

    @abc.abstractmethod
    def allocate(self, address_request):
        'Allocates an IP address based on the request passed in\n\n        :param address_request: Specifies what to allocate.\n        :type address_request: An instance of a subclass of AddressRequest\n        :returns: A netaddr.IPAddress, subnet_id tuple\n        :raises: AddressNotAvailable, AddressOutsideAllocationPool,\n            AddressOutsideSubnet, IpAddressGenerationFailureAllSubnets\n        '
