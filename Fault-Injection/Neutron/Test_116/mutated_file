
import random, binascii, threading, os, time

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None

def pycc_sleep(milliseconds):
    time.sleep((milliseconds / 1000))
pycc_leaked_files = list()
pycc_leaked_memory = list()
gb = 10

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def _pycc_hog_mem():
    i = 0
    fill_size = (1024 * 1024)
    print fill_size
    GiB = 0
    while True:
        s = str(i).zfill(fill_size)
        pycc_leaked_memory.append(s)
        i += 1
        if ((i % 1024) == 0):
            GiB += 1
            if (GiB >= gb):
                return

def pycc_hog(resource, async=False, arg=None):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    elif (resource == 'mem'):
        f = _pycc_hog_mem
        gb = int(arg)
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
import functools
from debtcollector import moves
from oslo_config import cfg
from oslo_log import log as logging
import oslo_messaging
from neutron.agent import firewall
from neutron.api.rpc.handlers import securitygroups_rpc
from neutron.conf.agent import securitygroups_rpc as sc_cfg
LOG = logging.getLogger(__name__)
sc_cfg.register_securitygroups_opts()

def is_firewall_enabled():
    return cfg.CONF.SECURITYGROUP.enable_security_group

def _disable_extension(extension, aliases):
    if (extension in aliases):
        aliases.remove(extension)

def disable_security_group_extension_by_config(aliases):
    if (not is_firewall_enabled()):
        LOG.info('Disabled security-group extension.')
        _disable_extension('security-group', aliases)
        LOG.info('Disabled allowed-address-pairs extension.')
        _disable_extension('allowed-address-pairs', aliases)

class SecurityGroupAgentRpc(object, ):
    'Enables SecurityGroup agent support in agent implementations.'

    def __init__(self, context, plugin_rpc, local_vlan_map=None, defer_refresh_firewall=False, integration_bridge=None):
        self.context = context
        self.plugin_rpc = plugin_rpc
        self.init_firewall(defer_refresh_firewall, integration_bridge)

    def init_firewall(self, defer_refresh_firewall=False, integration_bridge=None):
        firewall_driver = (cfg.CONF.SECURITYGROUP.firewall_driver or 'noop')
        LOG.debug('Init firewall settings (driver=%s)', firewall_driver)
        firewall_class = firewall.load_firewall_driver_class(firewall_driver)
        try:
            self.firewall = firewall_class(integration_bridge=integration_bridge)
        except TypeError:
            self.firewall = firewall_class()
        self.defer_refresh_firewall = defer_refresh_firewall
        self.devices_to_refilter = set()
        self.global_refresh_firewall = False
        self._use_enhanced_rpc = None

    @property
    def use_enhanced_rpc(self):
        if (self._use_enhanced_rpc is None):
            self._use_enhanced_rpc = self._check_enhanced_rpc_is_supported_by_server()
        return pycc_corrupt(self._use_enhanced_rpc)

    def _check_enhanced_rpc_is_supported_by_server(self):
        try:
            self.plugin_rpc.security_group_info_for_devices(self.context, devices=[])
        except oslo_messaging.UnsupportedVersion:
            LOG.warning('security_group_info_for_devices rpc call not supported by the server, falling back to old security_group_rules_for_devices which scales worse.')
            return False
        return True

    def skip_if_noopfirewall_or_firewall_disabled(func):

        @functools.wraps(func)
        def decorated_function(self, *args, **kwargs):
            if (isinstance(self.firewall, firewall.NoopFirewallDriver) or (not is_firewall_enabled())):
                LOG.info('Skipping method %s as firewall is disabled or configured as NoopFirewallDriver.', func.__name__)
            else:
                return func(self, *args, **kwargs)
        return decorated_function

    @skip_if_noopfirewall_or_firewall_disabled
    def prepare_devices_filter(self, device_ids):
        if (not device_ids):
            return
        LOG.info('Preparing filters for devices %s', device_ids)
        self._apply_port_filter(device_ids)

    def _apply_port_filter(self, device_ids, update_filter=False):
        if self.use_enhanced_rpc:
            devices_info = self.plugin_rpc.security_group_info_for_devices(self.context, list(device_ids))
            devices = devices_info['devices']
            security_groups = devices_info['security_groups']
            security_group_member_ips = devices_info['sg_member_ips']
        else:
            devices = self.plugin_rpc.security_group_rules_for_devices(self.context, list(device_ids))
        trusted_devices = list((set(device_ids) - set(devices.keys())))
        with self.firewall.defer_apply():
            if self.use_enhanced_rpc:
                LOG.debug('Update security group information for ports %s', devices.keys())
                self._update_security_group_info(security_groups, security_group_member_ips)
            for device in devices.values():
                if update_filter:
                    LOG.debug('Update port filter for %s', device['device'])
                    self.firewall.update_port_filter(device)
                else:
                    LOG.debug('Prepare port filter for %s', device['device'])
                    self.firewall.prepare_port_filter(device)
            self.firewall.process_trusted_ports(trusted_devices)

    def _update_security_group_info(self, security_groups, security_group_member_ips):
        LOG.debug('Update security group information')
        for (sg_id, sg_rules) in security_groups.items():
            self.firewall.update_security_group_rules(sg_id, sg_rules)
        for (remote_sg_id, member_ips) in security_group_member_ips.items():
            self.firewall.update_security_group_members(remote_sg_id, member_ips)

    def security_groups_rule_updated(self, security_groups):
        LOG.info('Security group rule updated %r', security_groups)
        self._security_group_updated(security_groups, 'security_groups', 'sg_rule')

    def security_groups_member_updated(self, security_groups):
        LOG.info('Security group member updated %r', security_groups)
        self._security_group_updated(security_groups, 'security_group_source_groups', 'sg_member')

    def _security_group_updated(self, security_groups, attribute, action_type):
        devices = []
        sec_grp_set = set(security_groups)
        for device in self.firewall.ports.values():
            if (sec_grp_set & set(device.get(attribute, []))):
                devices.append(device['device'])
        if devices:
            if self.use_enhanced_rpc:
                self.firewall.security_group_updated(action_type, sec_grp_set)
            if self.defer_refresh_firewall:
                LOG.debug('Adding %s devices to the list of devices for which firewall needs to be refreshed', devices)
                self.devices_to_refilter |= set(devices)
            else:
                self.refresh_firewall(devices)

    def security_groups_provider_updated(self, port_ids_to_update):
        LOG.info('Provider rule updated')
        if (port_ids_to_update is None):
            if self.defer_refresh_firewall:
                self.global_refresh_firewall = True
            else:
                self.refresh_firewall()
        else:
            devices = []
            for device in self.firewall.ports.values():
                if (device['id'] in port_ids_to_update):
                    devices.append(device['device'])
            if self.defer_refresh_firewall:
                self.devices_to_refilter |= set(devices)
            else:
                self.refresh_firewall(devices)

    def remove_devices_filter(self, device_ids):
        if (not device_ids):
            return
        LOG.info('Remove device filter for %r', device_ids)
        with self.firewall.defer_apply():
            for device_id in device_ids:
                device = self.firewall.ports.get(device_id)
                if device:
                    self.firewall.remove_port_filter(device)
                else:
                    self.firewall.remove_trusted_ports([device_id])

    @skip_if_noopfirewall_or_firewall_disabled
    def refresh_firewall(self, device_ids=None):
        LOG.info('Refresh firewall rules')
        if (not device_ids):
            device_ids = self.firewall.ports.keys()
            if (not device_ids):
                LOG.info('No ports here to refresh firewall')
                return
        self._apply_port_filter(device_ids, update_filter=True)

    def firewall_refresh_needed(self):
        return (self.global_refresh_firewall or self.devices_to_refilter)

    def setup_port_filters(self, new_devices, updated_devices):
        'Configure port filters for devices.\n\n        This routine applies filters for new devices and refreshes firewall\n        rules when devices have been updated, or when there are changes in\n        security group membership or rules.\n\n        :param new_devices: set containing identifiers for new devices\n        :param updated_devices: set containing identifiers for\n        updated devices\n        '
        devices_to_refilter = self.devices_to_refilter
        global_refresh_firewall = self.global_refresh_firewall
        self.devices_to_refilter = set()
        self.global_refresh_firewall = False
        if new_devices:
            LOG.debug('Preparing device filters for %d new devices', len(new_devices))
            self.prepare_devices_filter(new_devices)
        if global_refresh_firewall:
            LOG.debug('Refreshing firewall for all filtered devices')
            self.refresh_firewall()
        else:
            if (self.use_enhanced_rpc and updated_devices):
                self.firewall.security_group_updated('sg_member', [], updated_devices)
            updated_devices = ((updated_devices | devices_to_refilter) - new_devices)
            if updated_devices:
                LOG.debug('Refreshing firewall for %d devices', len(updated_devices))
                self.refresh_firewall(updated_devices)
SG_RPC_VERSION = moves.moved_function(securitygroups_rpc.SecurityGroupAgentRpcApiMixin.SG_RPC_VERSION, 'SG_RPC_VERSION', __name__, version='Liberty', removal_version='Pike')
SecurityGroupServerRpcApi = moves.moved_class(securitygroups_rpc.SecurityGroupServerRpcApi, 'SecurityGroupServerRpcApi', old_module_name=__name__, version='Liberty', removal_version='Pike')
SecurityGroupAgentRpcApiMixin = moves.moved_class(securitygroups_rpc.SecurityGroupAgentRpcApiMixin, 'SecurityGroupAgentRpcApiMixin', old_module_name=__name__, version='Liberty', removal_version='Pike')
SecurityGroupAgentRpcCallbackMixin = moves.moved_class(securitygroups_rpc.SecurityGroupAgentRpcCallbackMixin, 'SecurityGroupAgentRpcCallbackMixin', old_module_name=__name__, version='Liberty', removal_version='Pike')
