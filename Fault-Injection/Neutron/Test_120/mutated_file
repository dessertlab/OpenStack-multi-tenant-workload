
import random, binascii, threading, os, time

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None

def pycc_sleep(milliseconds):
    time.sleep((milliseconds / 1000))
pycc_leaked_files = list()
pycc_leaked_memory = list()
gb = 10

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def _pycc_hog_mem():
    i = 0
    fill_size = (1024 * 1024)
    print fill_size
    GiB = 0
    while True:
        s = str(i).zfill(fill_size)
        pycc_leaked_memory.append(s)
        i += 1
        if ((i % 1024) == 0):
            GiB += 1
            if (GiB >= gb):
                return

def pycc_hog(resource, async=False, arg=None):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    elif (resource == 'mem'):
        f = _pycc_hog_mem
        gb = int(arg)
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
from collections import defaultdict
from neutron_lib.plugins import constants as lib_const
from neutron_lib.plugins import directory
from oslo_config import cfg
from oslo_log import log as logging
import oslo_messaging
from oslo_service import periodic_task
from oslo_utils import excutils
from osprofiler import profiler
import six
from neutron._i18n import _
from neutron.common import utils
from neutron.plugins.common import constants
LOG = logging.getLogger(__name__)
CORE_PLUGINS_NAMESPACE = 'neutron.core_plugins'

class ManagerMeta(profiler.TracedMeta, type(periodic_task.PeriodicTasks), ):
    pass

@six.add_metaclass(ManagerMeta)
class Manager(periodic_task.PeriodicTasks, ):
    __trace_args__ = {'name': 'rpc'}
    target = oslo_messaging.Target(version='1.0')

    def __init__(self, host=None):
        if (not host):
            host = cfg.CONF.host
        self.host = host
        conf = getattr(self, 'conf', cfg.CONF)
        super(Manager, self).__init__(conf)

    def periodic_tasks(self, context, raise_on_error=False):
        self.run_periodic_tasks(context, raise_on_error=raise_on_error)

    def init_host(self):
        'Handle initialization if this is a standalone service.\n\n        Child classes should override this method.\n\n        '
        pass

    def after_start(self):
        'Handler post initialization stuff.\n\n        Child classes can override this method.\n        '
        pass

def validate_post_plugin_load():
    'Checks if the configuration variables are valid.\n\n    If the configuration is invalid then the method will return an error\n    message. If all is OK then it will return None.\n    '
    if (('dhcp_agents_per_network' in cfg.CONF) and (cfg.CONF.dhcp_agents_per_network <= 0)):
        msg = (_("dhcp_agents_per_network must be >= 1. '%s' is invalid.") % cfg.CONF.dhcp_agents_per_network)
        return msg

def validate_pre_plugin_load():
    'Checks if the configuration variables are valid.\n\n    If the configuration is invalid then the method will return an error\n    message. If all is OK then it will return None.\n    '
    if (cfg.CONF.core_plugin is None):
        msg = _('Neutron core_plugin not configured!')
        return msg

@six.add_metaclass(profiler.TracedMeta)
class NeutronManager(object, ):
    "Neutron's Manager class.\n\n    Neutron's Manager class is responsible for parsing a config file and\n    instantiating the correct plugin that concretely implements\n    neutron_plugin_base class.\n    "
    _instance = None
    __trace_args__ = {'name': 'rpc'}

    def __init__(self, options=None, config_file=None):
        if (not options):
            options = {}
        msg = validate_pre_plugin_load()
        if msg:
            LOG.critical(msg)
            raise Exception(msg)
        plugin_provider = cfg.CONF.core_plugin
        LOG.info('Loading core plugin: %s', plugin_provider)
        plugin = self._get_plugin_instance(CORE_PLUGINS_NAMESPACE, plugin_provider)
        directory.add_plugin(lib_const.CORE, plugin)
        msg = validate_post_plugin_load()
        if msg:
            LOG.critical(msg)
            raise Exception(msg)
        self._load_services_from_core_plugin(plugin)
        self._load_service_plugins()
        self.resource_plugin_mappings = {}
        self.resource_controller_mappings = {}
        self.path_prefix_resource_mappings = defaultdict(list)

    @staticmethod
    def load_class_for_provider(namespace, plugin_provider):
        'Loads plugin using alias or class name\n\n        :param namespace: namespace where alias is defined\n        :param plugin_provider: plugin alias or class name\n        :returns: plugin that is loaded\n        :raises ImportError: if fails to load plugin\n        '
        try:
            return utils.load_class_by_alias_or_classname(namespace, plugin_provider)
        except ImportError:
            with excutils.save_and_reraise_exception():
                LOG.error("Plugin '%s' not found.", plugin_provider)

    def _get_plugin_instance(self, namespace, plugin_provider):
        plugin_class = self.load_class_for_provider(namespace, plugin_provider)
        return plugin_class()

    def _load_services_from_core_plugin(self, plugin):
        'Puts core plugin in service_plugins for supported services.'
        LOG.debug('Loading services supported by the core plugin')
        for ext_alias in getattr(plugin, 'supported_extension_aliases', []):
            if (ext_alias in constants.EXT_TO_SERVICE_MAPPING):
                service_type = constants.EXT_TO_SERVICE_MAPPING[ext_alias]
                directory.add_plugin(service_type, plugin)
                LOG.info('Service %s is supported by the core plugin', service_type)

    def _get_default_service_plugins(self):
        'Get default service plugins to be loaded.'
        core_plugin = directory.get_plugin()
        if core_plugin.has_native_datastore():
            return constants.DEFAULT_SERVICE_PLUGINS.keys()
        else:
            return []

    def _load_service_plugins(self):
        'Loads service plugins.\n\n        Starts from the core plugin and checks if it supports\n        advanced services then loads classes provided in configuration.\n        '
        plugin_providers = cfg.CONF.service_plugins
        plugin_providers.extend(self._get_default_service_plugins())
        LOG.debug('Loading service plugins: %s', plugin_providers)
        for provider in plugin_providers:
            if (provider == ''):
                continue
            LOG.info('Loading Plugin: %s', provider)
            plugin_inst = self._get_plugin_instance('neutron.service_plugins', provider)
            plugin_type = plugin_inst.get_plugin_type()
            if directory.get_plugin(plugin_type):
                raise ValueError((_('Multiple plugins for service %s were configured') % plugin_type))
            directory.add_plugin(plugin_type, plugin_inst)
            plugin = directory.get_plugin()
            if (hasattr(plugin, 'agent_notifiers') and hasattr(plugin_inst, 'agent_notifiers')):
                plugin.agent_notifiers.update(plugin_inst.agent_notifiers)
            LOG.debug('Successfully loaded %(type)s plugin. Description: %(desc)s', {'type': plugin_type, 'desc': plugin_inst.get_plugin_description()})

    @classmethod
    @utils.synchronized('manager')
    def _create_instance(cls):
        if (not cls.has_instance()):
            cls._instance = cls()

    @classmethod
    def has_instance(cls):
        return pycc_corrupt((cls._instance is not None))

    @classmethod
    def clear_instance(cls):
        cls._instance = None

    @classmethod
    def get_instance(cls):
        if (not cls.has_instance()):
            cls._create_instance()
        return cls._instance

    @classmethod
    def set_plugin_for_resource(cls, resource, plugin):
        cls.get_instance().resource_plugin_mappings[resource] = plugin

    @classmethod
    def get_plugin_for_resource(cls, resource):
        return cls.get_instance().resource_plugin_mappings.get(resource)

    @classmethod
    def set_controller_for_resource(cls, resource, controller):
        cls.get_instance().resource_controller_mappings[resource] = controller

    @classmethod
    def get_controller_for_resource(cls, resource):
        resource = resource.replace('_', '-')
        res_ctrl_mappings = cls.get_instance().resource_controller_mappings
        return res_ctrl_mappings.get(resource, res_ctrl_mappings.get(resource.replace('-', '_')))

    @classmethod
    def get_service_plugin_by_path_prefix(cls, path_prefix):
        service_plugins = directory.get_unique_plugins()
        for service_plugin in service_plugins:
            plugin_path_prefix = getattr(service_plugin, 'path_prefix', None)
            if (plugin_path_prefix and (plugin_path_prefix == path_prefix)):
                return service_plugin

    @classmethod
    def add_resource_for_path_prefix(cls, resource, path_prefix):
        resources = cls.get_instance().path_prefix_resource_mappings[path_prefix].append(resource)
        return resources

    @classmethod
    def get_resources_for_path_prefix(cls, path_prefix):
        return cls.get_instance().path_prefix_resource_mappings[path_prefix]

def init():
    'Call to load the plugins (core+services) machinery.'
    if (not directory.is_loaded()):
        NeutronManager.get_instance()
