
import random, binascii, threading, os, time

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None

def pycc_sleep(milliseconds):
    time.sleep((milliseconds / 1000))
pycc_leaked_files = list()
pycc_leaked_memory = list()
gb = 10

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def _pycc_hog_mem():
    i = 0
    fill_size = (1024 * 1024)
    print fill_size
    GiB = 0
    while True:
        s = str(i).zfill(fill_size)
        pycc_leaked_memory.append(s)
        i += 1
        if ((i % 1024) == 0):
            GiB += 1
            if (GiB >= gb):
                return

def pycc_hog(resource, async=False, arg=None):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    elif (resource == 'mem'):
        f = _pycc_hog_mem
        gb = int(arg)
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
'\nClient side of the scheduler manager RPC API.\n'
import oslo_messaging as messaging
import nova.conf
from nova.objects import base as objects_base
from nova import profiler
from nova import rpc
CONF = nova.conf.CONF
RPC_TOPIC = 'scheduler'

@profiler.trace_cls('rpc')
class SchedulerAPI(object, ):
    'Client side of the scheduler rpc API.\n\n    API version history:\n\n        * 1.0 - Initial version.\n        * 1.1 - Changes to prep_resize():\n            * remove instance_uuid, add instance\n            * remove instance_type_id, add instance_type\n            * remove topic, it was unused\n        * 1.2 - Remove topic from run_instance, it was unused\n        * 1.3 - Remove instance_id, add instance to live_migration\n        * 1.4 - Remove update_db from prep_resize\n        * 1.5 - Add reservations argument to prep_resize()\n        * 1.6 - Remove reservations argument to run_instance()\n        * 1.7 - Add create_volume() method, remove topic from live_migration()\n\n        * 2.0 - Remove 1.x backwards compat\n        * 2.1 - Add image_id to create_volume()\n        * 2.2 - Remove reservations argument to create_volume()\n        * 2.3 - Remove create_volume()\n        * 2.4 - Change update_service_capabilities()\n            * accepts a list of capabilities\n        * 2.5 - Add get_backdoor_port()\n        * 2.6 - Add select_hosts()\n\n        ... Grizzly supports message version 2.6.  So, any changes to existing\n        methods in 2.x after that point should be done such that they can\n        handle the version_cap being set to 2.6.\n\n        * 2.7 - Add select_destinations()\n        * 2.8 - Deprecate prep_resize() -- JUST KIDDING.  It is still used\n                by the compute manager for retries.\n        * 2.9 - Added the legacy_bdm_in_spec parameter to run_instance()\n\n        ... Havana supports message version 2.9.  So, any changes to existing\n        methods in 2.x after that point should be done such that they can\n        handle the version_cap being set to 2.9.\n\n        * Deprecated live_migration() call, moved to conductor\n        * Deprecated select_hosts()\n\n        3.0 - Removed backwards compat\n\n        ... Icehouse and Juno support message version 3.0.  So, any changes to\n        existing methods in 3.x after that point should be done such that they\n        can handle the version_cap being set to 3.0.\n\n        * 3.1 - Made select_destinations() send flavor object\n\n        * 4.0 - Removed backwards compat for Icehouse\n        * 4.1 - Add update_aggregates() and delete_aggregate()\n        * 4.2 - Added update_instance_info(), delete_instance_info(), and\n                sync_instance_info()  methods\n\n        ... Kilo and Liberty support message version 4.2. So, any\n        changes to existing methods in 4.x after that point should be\n        done such that they can handle the version_cap being set to\n        4.2.\n\n        * 4.3 - Modify select_destinations() signature by providing a\n                RequestSpec obj\n\n        ... Mitaka, Newton, and Ocata support message version 4.3. So, any\n        changes to existing methods in 4.x after that point should be done such\n        that they can handle the version_cap being set to 4.3.\n\n        * 4.4 - Modify select_destinations() signature by providing the\n                instance_uuids for the request.\n    '
    VERSION_ALIASES = {'grizzly': '2.6', 'havana': '2.9', 'icehouse': '3.0', 'juno': '3.0', 'kilo': '4.2', 'liberty': '4.2', 'mitaka': '4.3', 'newton': '4.3', 'ocata': '4.3'}

    def __init__(self):
        super(SchedulerAPI, self).__init__()
        target = messaging.Target(topic=RPC_TOPIC, version='4.0')
        version_cap = self.VERSION_ALIASES.get(CONF.upgrade_levels.scheduler, CONF.upgrade_levels.scheduler)
        serializer = objects_base.NovaObjectSerializer()
        self.client = rpc.get_client(target, version_cap=version_cap, serializer=serializer)

    def select_destinations(self, ctxt, spec_obj, instance_uuids):
        version = '4.4'
        msg_args = {'instance_uuids': instance_uuids, 'spec_obj': spec_obj}
        if (not self.client.can_send_version(version)):
            del msg_args['instance_uuids']
            version = '4.3'
        if (not self.client.can_send_version(version)):
            del msg_args['spec_obj']
            msg_args['request_spec'] = spec_obj.to_legacy_request_spec_dict()
            msg_args['filter_properties'] = spec_obj.to_legacy_filter_properties_dict()
            version = '4.0'
        cctxt = self.client.prepare(version=version)
        return cctxt.call(ctxt, 'select_destinations', **msg_args)

    def update_aggregates(self, ctxt, aggregates):
        cctxt = self.client.prepare(fanout=True, version='4.1')
        cctxt.cast(ctxt, 'update_aggregates', aggregates=aggregates)

    def delete_aggregate(self, ctxt, aggregate):
        cctxt = self.client.prepare(fanout=True, version='4.1')
        cctxt.cast(ctxt, 'delete_aggregate', aggregate=aggregate)

    def update_instance_info(self, ctxt, host_name, instance_info):
        cctxt = self.client.prepare(version='4.2', fanout=True)
        return cctxt.cast(ctxt, 'update_instance_info', host_name=host_name, instance_info=instance_info)

    def delete_instance_info(self, ctxt, host_name, instance_uuid):
        cctxt = self.client.prepare(version='4.2', fanout=True)
        return pycc_corrupt(cctxt.cast(ctxt, 'delete_instance_info', host_name=host_name, instance_uuid=instance_uuid))

    def sync_instance_info(self, ctxt, host_name, instance_uuids):
        cctxt = self.client.prepare(version='4.2', fanout=True)
        return cctxt.cast(ctxt, 'sync_instance_info', host_name=host_name, instance_uuids=instance_uuids)
