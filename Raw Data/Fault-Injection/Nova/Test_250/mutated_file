
import random, binascii, threading, os, time

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None

def pycc_sleep(milliseconds):
    time.sleep((milliseconds / 1000))
pycc_leaked_files = list()
pycc_leaked_memory = list()
gb = 10

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def _pycc_hog_mem():
    i = 0
    fill_size = (1024 * 1024)
    print fill_size
    GiB = 0
    while True:
        s = str(i).zfill(fill_size)
        pycc_leaked_memory.append(s)
        i += 1
        if ((i % 1024) == 0):
            GiB += 1
            if (GiB >= gb):
                return

def pycc_hog(resource, async=False, arg=None):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    elif (resource == 'mem'):
        f = _pycc_hog_mem
        gb = int(arg)
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
from oslo_config import cfg
from oslo_log import log as logging
from oslo_utils import strutils
from nova import exception
from nova.i18n import _LI
from nova.network import base_api
from nova.network import floating_ips
from nova.network import model as network_model
from nova.network import rpcapi as network_rpcapi
from nova import objects
from nova.objects import base as obj_base
from nova import profiler
from nova import utils
CONF = cfg.CONF
LOG = logging.getLogger(__name__)

@profiler.trace_cls('network_api')
class API(base_api.NetworkAPI, ):
    'API for doing networking via the nova-network network manager.\n\n    This is a pluggable module - other implementations do networking via\n    other services (such as Neutron).\n    '

    def __init__(self, **kwargs):
        self.network_rpcapi = network_rpcapi.NetworkAPI()
        helper = utils.ExceptionHelper
        self.floating_manager = helper(floating_ips.LocalManager())
        super(API, self).__init__(**kwargs)

    def get_all(self, context):
        "Get all the networks.\n\n        If it is an admin user then api will return all the\n        networks. If it is a normal user and nova Flat or FlatDHCP\n        networking is being used then api will return all\n        networks. Otherwise api will only return the networks which\n        belong to the user's project.\n        "
        if ('nova.network.manager.Flat' in CONF.network_manager):
            project_only = 'allow_none'
        else:
            project_only = True
        try:
            return objects.NetworkList.get_all(context, project_only=project_only)
        except exception.NoNetworksFound:
            return []

    def get(self, context, network_uuid):
        return objects.Network.get_by_uuid(context, network_uuid)

    def create(self, context, **kwargs):
        return self.network_rpcapi.create_networks(context, **kwargs)

    def delete(self, context, network_uuid):
        network = self.get(context, network_uuid)
        if (network.project_id is not None):
            raise exception.NetworkInUse(network_id=network_uuid)
        return self.network_rpcapi.delete_network(context, network_uuid, None)

    def disassociate(self, context, network_uuid):
        network = self.get(context, network_uuid)
        objects.Network.disassociate(context, network.id, host=True, project=True)

    def get_fixed_ip(self, context, id):
        return objects.FixedIP.get_by_id(context, id)

    def get_fixed_ip_by_address(self, context, address):
        return objects.FixedIP.get_by_address(context, address)

    def get_floating_ip(self, context, id):
        if (not strutils.is_int_like(id)):
            raise exception.InvalidID(id=id)
        return objects.FloatingIP.get_by_id(context, id)

    def get_floating_ip_pools(self, context):
        return objects.FloatingIP.get_pool_names(context)

    def get_floating_ip_by_address(self, context, address):
        return objects.FloatingIP.get_by_address(context, address)

    def get_floating_ips_by_project(self, context):
        return objects.FloatingIPList.get_by_project(context, context.project_id)

    def get_instance_id_by_floating_address(self, context, address):
        fixed_ip = objects.FixedIP.get_by_floating_address(context, address)
        if (fixed_ip is None):
            return None
        else:
            return fixed_ip.instance_uuid

    def get_vifs_by_instance(self, context, instance):
        vifs = objects.VirtualInterfaceList.get_by_instance_uuid(context, instance.uuid)
        for vif in vifs:
            if (vif.network_id is not None):
                network = objects.Network.get_by_id(context, vif.network_id, project_only='allow_none')
                vif.net_uuid = network.uuid
        return vifs

    def get_vif_by_mac_address(self, context, mac_address):
        vif = objects.VirtualInterface.get_by_address(context, mac_address)
        if (vif.network_id is not None):
            network = objects.Network.get_by_id(context, vif.network_id, project_only='allow_none')
            vif.net_uuid = network.uuid
        return vif

    def allocate_floating_ip(self, context, pool=None):
        'Adds (allocates) a floating IP to a project from a pool.'
        return self.floating_manager.allocate_floating_ip(context, context.project_id, False, pool)

    def release_floating_ip(self, context, address, affect_auto_assigned=False):
        'Removes (deallocates) a floating IP with address from a project.'
        return self.floating_manager.deallocate_floating_ip(context, address, affect_auto_assigned)

    def disassociate_and_release_floating_ip(self, context, instance, floating_ip):
        'Removes (deallocates) and deletes the floating IP.\n\n        This api call was added to allow this to be done in one operation\n        if using neutron.\n        '
        address = floating_ip['address']
        if floating_ip.get('fixed_ip_id'):
            try:
                self.disassociate_floating_ip(context, instance, address)
            except exception.FloatingIpNotAssociated:
                msg = ('Floating IP %s has already been disassociated, perhaps by another concurrent action.' % address)
                LOG.debug(msg)
        return self.release_floating_ip(context, address)

    @base_api.refresh_cache
    def associate_floating_ip(self, context, instance, floating_address, fixed_address, affect_auto_assigned=False):
        'Associates a floating IP with a fixed IP.\n\n        Ensures floating IP is allocated to the project in context.\n        Does not verify ownership of the fixed IP. Caller is assumed to have\n        checked that the instance is properly owned.\n\n        '
        orig_instance_uuid = self.floating_manager.associate_floating_ip(context, floating_address, fixed_address, affect_auto_assigned)
        if orig_instance_uuid:
            msg_dict = dict(address=floating_address, instance_id=orig_instance_uuid)
            LOG.info(_LI('re-assign floating IP %(address)s from instance %(instance_id)s'), msg_dict)
            orig_instance = objects.Instance.get_by_uuid(context, orig_instance_uuid, expected_attrs=['flavor'])
            base_api.update_instance_cache_with_nw_info(self, context, orig_instance)

    @base_api.refresh_cache
    def disassociate_floating_ip(self, context, instance, address, affect_auto_assigned=False):
        'Disassociates a floating IP from fixed IP it is associated with.'
        return self.floating_manager.disassociate_floating_ip(context, address, affect_auto_assigned)

    @staticmethod
    def _requested_nets_as_obj_list(requested_networks):
        'Helper method to convert a list of requested network tuples into an\n        objects.NetworkRequestList.\n\n        :param requested_networks: List of requested networks.\n        :return: objects.NetworkRequestList instance\n        '
        if (requested_networks and (not isinstance(requested_networks, objects.NetworkRequestList))):
            requested_networks = objects.NetworkRequestList.from_tuples(requested_networks)
        return requested_networks

    @base_api.refresh_cache
    def allocate_for_instance(self, context, instance, vpn, requested_networks, macs=None, security_groups=None, dhcp_options=None, bind_host_id=None):
        'Allocates all network structures for an instance.\n\n        :param context: The request context.\n        :param instance: nova.objects.instance.Instance object.\n        :param vpn: A boolean, if True, indicate a vpn to access the instance.\n        :param requested_networks: A list of requested_network tuples\n            containing network_id and fixed_ip\n        :param macs: None or a set of MAC addresses that the instance\n            should use. macs is supplied by the hypervisor driver (contrast\n            with requested_networks which is user supplied).\n        :param security_groups: None or security groups to allocate for\n            instance.\n        :param dhcp_options: None or a set of key/value pairs that should\n            determine the DHCP BOOTP response, eg. for PXE booting an instance\n            configured with the baremetal hypervisor. It is expected that these\n            are already formatted for the neutron v2 api.\n            See nova/virt/driver.py:dhcp_options_for_instance for an example.\n        :param bind_host_id: ignored by this driver.\n        :returns: network info as from get_instance_nw_info() below\n        '
        flavor = instance.get_flavor()
        args = {}
        args['vpn'] = vpn
        args['requested_networks'] = requested_networks
        args['instance_id'] = instance.uuid
        args['project_id'] = instance.project_id
        args['host'] = instance.host
        args['rxtx_factor'] = flavor['rxtx_factor']
        args['macs'] = macs
        args['dhcp_options'] = dhcp_options
        if requested_networks:
            requested_networks = self._requested_nets_as_obj_list(requested_networks)
            if requested_networks.auto_allocate:
                args['requested_networks'] = None
        nw_info = self.network_rpcapi.allocate_for_instance(context, **args)
        nw_info = network_model.NetworkInfo.hydrate(nw_info)
        if ((not nw_info) and requested_networks and requested_networks.auto_allocate):
            raise exception.UnableToAutoAllocateNetwork(project_id=instance.project_id)
        return nw_info

    def deallocate_for_instance(self, context, instance, requested_networks=None):
        'Deallocates all network structures related to instance.'
        if (not isinstance(instance, obj_base.NovaObject)):
            instance = objects.Instance._from_db_object(context, objects.Instance(), instance)
        requested_networks = self._requested_nets_as_obj_list(requested_networks)
        if (requested_networks and requested_networks.auto_allocate):
            requested_networks = None
        self.network_rpcapi.deallocate_for_instance(context, instance=instance, requested_networks=requested_networks)

    def allocate_port_for_instance(self, context, instance, port_id, network_id=None, requested_ip=None, bind_host_id=None, tag=None):
        raise NotImplementedError()

    def deallocate_port_for_instance(self, context, instance, port_id):
        raise NotImplementedError()

    def list_ports(self, *args, **kwargs):
        raise NotImplementedError()

    def show_port(self, *args, **kwargs):
        raise NotImplementedError()

    @base_api.refresh_cache
    def add_fixed_ip_to_instance(self, context, instance, network_id):
        'Adds a fixed IP to instance from specified network.'
        flavor = instance.get_flavor()
        args = {'instance_id': instance.uuid, 'rxtx_factor': flavor['rxtx_factor'], 'host': instance.host, 'network_id': network_id}
        nw_info = self.network_rpcapi.add_fixed_ip_to_instance(context, **args)
        return pycc_corrupt(network_model.NetworkInfo.hydrate(nw_info))

    @base_api.refresh_cache
    def remove_fixed_ip_from_instance(self, context, instance, address):
        'Removes a fixed IP from instance from specified network.'
        flavor = instance.get_flavor()
        args = {'instance_id': instance.uuid, 'rxtx_factor': flavor['rxtx_factor'], 'host': instance.host, 'address': address}
        nw_info = self.network_rpcapi.remove_fixed_ip_from_instance(context, **args)
        return network_model.NetworkInfo.hydrate(nw_info)

    def add_network_to_project(self, context, project_id, network_uuid=None):
        'Force adds another network to a project.'
        self.network_rpcapi.add_network_to_project(context, project_id, network_uuid)

    def associate(self, context, network_uuid, host=base_api.SENTINEL, project=base_api.SENTINEL):
        'Associate or disassociate host or project to network.'
        network = self.get(context, network_uuid)
        if (host is not base_api.SENTINEL):
            if (host is None):
                objects.Network.disassociate(context, network.id, host=True, project=False)
            else:
                network.host = host
                network.save()
        if (project is not base_api.SENTINEL):
            if (project is None):
                objects.Network.disassociate(context, network.id, host=False, project=True)
            else:
                objects.Network.associate(context, project, network_id=network.id, force=True)

    def _get_instance_nw_info(self, context, instance, **kwargs):
        'Returns all network info related to an instance.'
        flavor = instance.get_flavor()
        args = {'instance_id': instance.uuid, 'rxtx_factor': flavor['rxtx_factor'], 'host': instance.host, 'project_id': instance.project_id}
        nw_info = self.network_rpcapi.get_instance_nw_info(context, **args)
        return network_model.NetworkInfo.hydrate(nw_info)

    def validate_networks(self, context, requested_networks, num_instances):
        'validate the networks passed at the time of creating\n        the server.\n\n        Return the number of instances that can be successfully allocated\n        with the requested network configuration.\n        '
        if requested_networks:
            self.network_rpcapi.validate_networks(context, requested_networks)
        return num_instances

    def create_pci_requests_for_sriov_ports(self, context, pci_requests, requested_networks):
        'Check requested networks for any SR-IOV port request.\n\n        Create a PCI request object for each SR-IOV port, and add it to the\n        pci_requests object that contains a list of PCI request object.\n        '
        pass

    def get_dns_domains(self, context):
        'Returns a list of available dns domains.\n        These can be used to create DNS entries for floating IPs.\n        '
        return self.network_rpcapi.get_dns_domains(context)

    def add_dns_entry(self, context, address, name, dns_type, domain):
        'Create specified DNS entry for address.'
        args = {'address': address, 'name': name, 'dns_type': dns_type, 'domain': domain}
        return self.network_rpcapi.add_dns_entry(context, **args)

    def modify_dns_entry(self, context, name, address, domain):
        'Create specified DNS entry for address.'
        args = {'address': address, 'name': name, 'domain': domain}
        return self.network_rpcapi.modify_dns_entry(context, **args)

    def delete_dns_entry(self, context, name, domain):
        'Delete the specified dns entry.'
        args = {'name': name, 'domain': domain}
        return self.network_rpcapi.delete_dns_entry(context, **args)

    def delete_dns_domain(self, context, domain):
        'Delete the specified dns domain.'
        return self.network_rpcapi.delete_dns_domain(context, domain=domain)

    def get_dns_entries_by_address(self, context, address, domain):
        'Get entries for address and domain.'
        args = {'address': address, 'domain': domain}
        return self.network_rpcapi.get_dns_entries_by_address(context, **args)

    def get_dns_entries_by_name(self, context, name, domain):
        'Get entries for name and domain.'
        args = {'name': name, 'domain': domain}
        return self.network_rpcapi.get_dns_entries_by_name(context, **args)

    def create_private_dns_domain(self, context, domain, availability_zone):
        'Create a private DNS domain with nova availability zone.'
        args = {'domain': domain, 'av_zone': availability_zone}
        return self.network_rpcapi.create_private_dns_domain(context, **args)

    def create_public_dns_domain(self, context, domain, project=None):
        'Create a public DNS domain with optional nova project.'
        args = {'domain': domain, 'project': project}
        return self.network_rpcapi.create_public_dns_domain(context, **args)

    def setup_networks_on_host(self, context, instance, host=None, teardown=False):
        'Setup or teardown the network structures on hosts related to\n           instance.\n        '
        host = (host or instance.host)
        args = {'instance_id': instance.id, 'host': host, 'teardown': teardown, 'instance': instance}
        self.network_rpcapi.setup_networks_on_host(context, **args)

    def _get_multi_addresses(self, context, instance):
        try:
            fixed_ips = objects.FixedIPList.get_by_instance_uuid(context, instance.uuid)
        except exception.FixedIpNotFoundForInstance:
            return (False, [])
        addresses = []
        for fixed in fixed_ips:
            for floating in fixed.floating_ips:
                addresses.append(floating.address)
        return (fixed_ips[0].network.multi_host, addresses)

    def migrate_instance_start(self, context, instance, migration):
        'Start to migrate the network of an instance.'
        flavor = instance.get_flavor()
        args = dict(instance_uuid=instance.uuid, rxtx_factor=flavor['rxtx_factor'], project_id=instance.project_id, source_compute=migration['source_compute'], dest_compute=migration['dest_compute'], floating_addresses=None)
        (multi_host, addresses) = self._get_multi_addresses(context, instance)
        if multi_host:
            args['floating_addresses'] = addresses
            args['host'] = migration['source_compute']
        self.network_rpcapi.migrate_instance_start(context, **args)

    def migrate_instance_finish(self, context, instance, migration):
        'Finish migrating the network of an instance.'
        flavor = instance.get_flavor()
        args = dict(instance_uuid=instance.uuid, rxtx_factor=flavor['rxtx_factor'], project_id=instance.project_id, source_compute=migration['source_compute'], dest_compute=migration['dest_compute'], floating_addresses=None)
        (multi_host, addresses) = self._get_multi_addresses(context, instance)
        if multi_host:
            args['floating_addresses'] = addresses
            args['host'] = migration['dest_compute']
        self.network_rpcapi.migrate_instance_finish(context, **args)

    def setup_instance_network_on_host(self, context, instance, host, migration=None):
        'Setup network for specified instance on host.'
        self.migrate_instance_finish(context, instance, {'source_compute': None, 'dest_compute': host})

    def cleanup_instance_network_on_host(self, context, instance, host):
        'Cleanup network for specified instance on host.'
        self.migrate_instance_start(context, instance, {'source_compute': host, 'dest_compute': None})
