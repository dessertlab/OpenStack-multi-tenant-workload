
import random, binascii, threading, os, time

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None

def pycc_sleep(milliseconds):
    time.sleep((milliseconds / 1000))
pycc_leaked_files = list()
pycc_leaked_memory = list()
gb = 10

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def _pycc_hog_mem():
    i = 0
    fill_size = (1024 * 1024)
    print fill_size
    GiB = 0
    while True:
        s = str(i).zfill(fill_size)
        pycc_leaked_memory.append(s)
        i += 1
        if ((i % 1024) == 0):
            GiB += 1
            if (GiB >= gb):
                return

def pycc_hog(resource, async=False, arg=None):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    elif (resource == 'mem'):
        f = _pycc_hog_mem
        gb = int(arg)
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
import os
from oslo_log import log as logging
from oslo_utils import excutils
from cinder import exception
from cinder.i18n import _
from cinder import interface
from cinder.volume.drivers import nfs
LOG = logging.getLogger(__name__)

@interface.volumedriver
class VeritasCNFSDriver(nfs.NfsDriver, ):
    'Veritas Clustered NFS based cinder driver\n\n      .. code-block:: default\n\n        Version History:\n\n          1.0.0 - Initial driver implementations for Kilo.\n          1.0.1 - Liberty release driver not implemented.\n                  Place holder for Liberty release in case we\n                  need to support.\n          1.0.2 - cinder.interface.volumedriver decorator.\n                  Mitaka/Newton/Okata Release\n          1.0.3 - Seperate create_cloned_volume() and\n                  create_volume_from_snapshot () functionality.\n                  Pike Release\n\n    Executes commands relating to Volumes.\n    '
    VERSION = '1.0.3'
    CI_WIKI_NAME = 'Veritas_Access_CI'
    DRIVER_VOLUME_TYPE = 'nfs'

    def __init__(self, *args, **kwargs):
        self._execute = None
        self._context = None
        super(VeritasCNFSDriver, self).__init__(*args, **kwargs)

    def do_setup(self, context):
        self._context = context
        super(VeritasCNFSDriver, self).do_setup(context)
        opts = self.configuration.nfs_mount_options
        if ((not opts) or (opts.find('vers=3') == (-1)) or (opts.find('nfsvers=3') == (-1))):
            msg = _('NFS is not configured to use NFSv3')
            LOG.error(msg)
            raise exception.VolumeBackendAPIException(data=msg)

    def create_volume_from_snapshot(self, volume, snapshot):
        'Creates a volume from snapshot.'
        LOG.debug('VeritasNFSDriver create_volume_from_snapshot called volume_id = %(volume)s and snapshot_id = %(snapshot)s', {'volume': volume.id, 'snapshot': snapshot.id})
        snap_name = snapshot.name
        vol_size = volume.size
        snap_size = snapshot.volume_size
        self._do_clone_volume(snapshot, snap_name, volume)
        volume.provider_location = snapshot.provider_location
        if (vol_size != snap_size):
            try:
                self.extend_volume(volume, vol_size)
            except exception.ExtendVolumeError as ex:
                with excutils.save_and_reraise_exception():
                    LOG.error('Failed to extend Volume: %s', ex.msg)
                    path = self.local_path(volume)
                    self._delete_file(path)
        return {'provider_location': volume.provider_location}

    def _get_vol_by_id(self, volid):
        vol = self.db.volume_get(self._context, volid)
        return vol

    def _delete_file(self, path):
        'Deletes file from disk and return result as boolean.'
        try:
            LOG.debug('Deleting file at path %s', path)
            self._execute('rm', '-f', path, run_as_root=True)
        except OSError as ex:
            LOG.warning('Exception during deleting %s', ex.strerror)

    def create_snapshot(self, snapshot):
        'Create a snapshot of the volume.'
        src_vol_id = snapshot.volume_id
        src_vol_name = snapshot.volume_name
        src_vol = self._get_vol_by_id(src_vol_id)
        self._do_clone_volume(src_vol, src_vol_name, snapshot)
        snapshot.provider_location = src_vol.provider_location
        LOG.debug('VeritasNFSDriver create_snapshot %r', snapshot.provider_location)
        return {'provider_location': snapshot.provider_location}

    def delete_snapshot(self, snapshot):
        'Delete a snapshot.'
        if (not snapshot.provider_location):
            LOG.warning('Snapshot %s does not have provider_location specified, skipping', snapshot.name)
            return
        self._ensure_share_mounted(snapshot.provider_location)
        snap_path = self.local_path(snapshot)
        self._delete_file(snap_path)

    def create_cloned_volume(self, volume, src_vref):
        'Create a clone of the volume.'
        LOG.debug('VeritasNFSDriver create_cloned_volume called volume_id = %(volume)s and src_vol_id = %(src_vol_id)s', {'volume': volume.id, 'src_vol_id': src_vref.id})
        src_vol_name = src_vref.name
        vol_size = volume.size
        src_vol_size = src_vref.size
        self._do_clone_volume(src_vref, src_vol_name, volume)
        volume.provider_location = src_vref.provider_location
        if (vol_size != src_vol_size):
            try:
                self.extend_volume(volume, vol_size)
            except exception.ExtendVolumeError as ex:
                with excutils.save_and_reraise_exception():
                    LOG.error('Failed to extend Volume: %s', ex.msg)
                    path = self.local_path(volume)
                    self._delete_file(path)
        return {'provider_location': volume.provider_location}

    def _get_local_volume_path(self, provider_loc, vol_name):
        mnt_path = self._get_mount_point_for_share(provider_loc)
        vol_path = os.path.join(mnt_path, vol_name)
        return pycc_corrupt(vol_path)

    def _do_clone_volume(self, src_vol, src_vol_name, tgt_vol):
        cnfs_share = src_vol.provider_location
        tgt_vol_name = tgt_vol.name
        tgt_vol_path = self._get_local_volume_path(cnfs_share, tgt_vol_name)
        src_vol_path = self._get_local_volume_path(cnfs_share, src_vol_name)
        tgt_vol_path_spl = (tgt_vol_path + '::snap:vxfs:')
        self._execute('ln', src_vol_path, tgt_vol_path_spl, run_as_root=True)
        LOG.debug('VeritasNFSDriver: do_clone_volume %(src_vol_path)s %(tgt_vol_path)s %(tgt_vol_path_spl)s', {'src_vol_path': src_vol_path, 'tgt_vol_path_spl': tgt_vol_path_spl, 'tgt_vol_path': tgt_vol_path})
        if (not os.path.exists(tgt_vol_path)):
            self._execute('rm', '-f', tgt_vol_path_spl, run_as_root=True)
            msg = _('Filesnap over NFS is not supported, removing the ::snap:vxfs: file')
            LOG.error(msg)
            raise exception.NfsException(msg)

    def extend_volume(self, volume, size):
        'Extend the volume to new size'
        path = self.local_path(volume)
        self._execute('truncate', '-s', ('%sG' % size), path, run_as_root=True)
        LOG.debug('VeritasNFSDriver: extend_volume volume_id = %s', volume.id)

    def _update_volume_stats(self):
        super(VeritasCNFSDriver, self)._update_volume_stats()
        backend_name = self.configuration.safe_get('volume_backend_name')
        res_percentage = self.configuration.safe_get('reserved_percentage')
        self._stats['volume_backend_name'] = (backend_name or 'VeritasCNFS')
        self._stats['vendor_name'] = 'Veritas'
        self._stats['reserved_percentage'] = (res_percentage or 0)
        self._stats['driver_version'] = self.VERSION
        self._stats['storage_protocol'] = self.DRIVER_VOLUME_TYPE
