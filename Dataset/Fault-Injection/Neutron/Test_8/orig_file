
import contextlib
import copy
import weakref
from debtcollector import removals
from neutron_lib.db import api
from neutron_lib import exceptions
from oslo_config import cfg
from oslo_db import api as oslo_db_api
from oslo_db import exception as db_exc
from oslo_log import log as logging
from oslo_utils import excutils
from osprofiler import opts as profiler_opts
import osprofiler.sqlalchemy
from pecan import util as p_util
import six
import sqlalchemy
from sqlalchemy import event
from sqlalchemy import exc as sql_exc
from sqlalchemy import orm
from sqlalchemy.orm import exc
from neutron.objects import exceptions as obj_exc

def set_hook(engine):
    if (profiler_opts.is_trace_enabled() and profiler_opts.is_db_trace_enabled()):
        osprofiler.sqlalchemy.add_tracing(sqlalchemy, engine, 'neutron.db')
context_manager = api.get_context_manager()
profiler_opts.set_defaults(cfg.CONF)
context_manager.append_on_engine_create(set_hook)
MAX_RETRIES = 10
LOG = logging.getLogger(__name__)

def is_retriable(e):
    if getattr(e, '_RETRY_EXCEEDED', False):
        return False
    if _is_nested_instance(e, (db_exc.DBDeadlock, exc.StaleDataError, db_exc.DBConnectionError, db_exc.DBDuplicateEntry, db_exc.RetryRequest, obj_exc.NeutronDbObjectDuplicateEntry)):
        return True
    return (_is_nested_instance(e, db_exc.DBError) and ('1305' in str(e)))
_retry_db_errors = oslo_db_api.wrap_db_retry(max_retries=MAX_RETRIES, retry_interval=0.1, inc_retry_interval=True, exception_checker=is_retriable)

def _tag_retriables_as_unretriable(f):
    'Puts a flag on retriable exceptions so is_retriable returns False.\n\n    This decorator can be used outside of a retry decorator to prevent\n    decorators higher up from retrying again.\n    '

    @six.wraps(f)
    def wrapped(*args, **kwargs):
        try:
            return f(*args, **kwargs)
        except Exception as e:
            with excutils.save_and_reraise_exception():
                if is_retriable(e):
                    setattr(e, '_RETRY_EXCEEDED', True)
    return wrapped

def _copy_if_lds(item):
    'Deepcopy lists/dicts/sets, leave everything else alone.'
    return (copy.deepcopy(item) if isinstance(item, (list, dict, set)) else item)

def retry_db_errors(f):
    "Nesting-safe retry decorator with auto-arg-copy and logging.\n\n    Retry decorator for all functions which do not accept a context as an\n    argument. If the function accepts a context, use\n    'retry_if_session_inactive' below.\n\n    If retriable errors are retried and exceed the count, they will be tagged\n    with a flag so is_retriable will no longer recognize them as retriable.\n    This prevents multiple applications of this decorator (and/or the one\n    below) from retrying the same exception.\n    "

    @_tag_retriables_as_unretriable
    @_retry_db_errors
    @six.wraps(f)
    def wrapped(*args, **kwargs):
        try:
            dup_args = [_copy_if_lds(a) for a in args]
            dup_kwargs = {k: _copy_if_lds(v) for (k, v) in kwargs.items()}
            return f(*dup_args, **dup_kwargs)
        except Exception as e:
            with excutils.save_and_reraise_exception():
                if is_retriable(e):
                    LOG.debug('Retry wrapper got retriable exception: %s', e)
    return wrapped

def retry_if_session_inactive(context_var_name='context'):
    "Retries only if the session in the context is inactive.\n\n    Calls a retry_db_errors wrapped version of the function if the context's\n    session passed in is inactive, otherwise it just calls the function\n    directly. This is useful to avoid retrying things inside of a transaction\n    which is ineffective for DB races/errors.\n\n    This should be used in all cases where retries are desired and the method\n    accepts a context.\n    "

    def decorator(f):
        try:
            ctx_arg_index = p_util.getargspec(f).args.index(context_var_name)
        except ValueError:
            raise RuntimeError(('Could not find position of var %s' % context_var_name))
        f_with_retry = retry_db_errors(f)

        @six.wraps(f)
        def wrapped(*args, **kwargs):
            if (context_var_name in kwargs):
                context = kwargs[context_var_name]
            else:
                context = args[ctx_arg_index]
            method = (f if context.session.is_active else f_with_retry)
            return method(*args, **kwargs)
        return wrapped
    return decorator

def _is_nested_instance(e, etypes):
    'Check if exception or its inner excepts are an instance of etypes.'
    if isinstance(e, etypes):
        return True
    if isinstance(e, exceptions.MultipleExceptions):
        return any((_is_nested_instance(i, etypes) for i in e.inner_exceptions))
    if isinstance(e, db_exc.DBError):
        return _is_nested_instance(e.inner_exception, etypes)
    return False

@contextlib.contextmanager
def exc_to_retry(etypes):
    try:
        (yield)
    except Exception as e:
        with excutils.save_and_reraise_exception() as ctx:
            if _is_nested_instance(e, etypes):
                ctx.reraise = False
                raise db_exc.RetryRequest(e)

@removals.remove(version='Ocata', removal_version='Pike', message='Usage of legacy facade is deprecated. Use get_reader_session or get_writer_session instead.')
def get_session(autocommit=True, expire_on_commit=False, use_slave=False):
    'Helper method to grab session.'
    return context_manager.get_legacy_facade().get_session(autocommit=autocommit, expire_on_commit=expire_on_commit, use_slave=use_slave)

def get_reader_session():
    'Helper to get reader session'
    return context_manager.reader.get_sessionmaker()()

def get_writer_session():
    'Helper to get writer session'
    return context_manager.writer.get_sessionmaker()()

@contextlib.contextmanager
def autonested_transaction(sess):
    "This is a convenience method to not bother with 'nested' parameter."
    if sess.is_active:
        session_context = sess.begin(nested=True)
    else:
        session_context = sess.begin(subtransactions=True)
    with session_context as tx:
        (yield tx)
_REGISTERED_SQLA_EVENTS = []

def sqla_listen(*args):
    'Wrapper to track subscribers for test teardowns.\n\n    SQLAlchemy has no "unsubscribe all" option for its event listener\n    framework so we need to keep track of the subscribers by having\n    them call through here for test teardowns.\n    '
    event.listen(*args)
    _REGISTERED_SQLA_EVENTS.append(args)

def sqla_remove(*args):
    event.remove(*args)
    _REGISTERED_SQLA_EVENTS.remove(args)

def sqla_remove_all():
    for args in _REGISTERED_SQLA_EVENTS:
        try:
            event.remove(*args)
        except sql_exc.InvalidRequestError:
            pass
    del _REGISTERED_SQLA_EVENTS[:]

@event.listens_for(orm.session.Session, 'after_flush')
def add_to_rel_load_list(session, flush_context=None):
    session.info.setdefault('_load_rels', weakref.WeakSet()).update(session.new)

@event.listens_for(orm.session.Session, 'before_commit')
def load_one_to_manys(session):
    if session.new:
        session.flush()
    if session.transaction.nested:
        return
    for new_object in session.info.pop('_load_rels', []):
        if (new_object not in session):
            continue
        state = sqlalchemy.inspect(new_object)
        session.enable_relationship_loading(new_object)
        for relationship_attr in state.mapper.relationships:
            if (relationship_attr.lazy not in ('joined', 'subquery')):
                continue
            if (relationship_attr.key not in state.dict):
                getattr(new_object, relationship_attr.key)
                assert (relationship_attr.key in state.dict)
