
import random, binascii, threading, os, time

def pycc_corrupt_string(string):
    if string:
        if (random.randint(0, 1) == 0):
            hexstring = binascii.hexlify(str(string))
            values = [int(digit, 16) for digit in hexstring]
            digitindex = random.randint(0, len(values))
            bitindex = random.randint(0, 3)
            values[(digitindex - 1)] ^= (1 << bitindex)
            result = ''.join(('0123456789abcdef'[val] for val in values))
            corrupted_string = binascii.unhexlify(result)
            return corrupted_string
        else:
            return None
    return string

def pycc_corrupt_dict_key(d):
    if d:
        old_key = random.choice(d.keys())
        corrupted_key = pycc_corrupt(old_key)
        d[corrupted_key] = d.pop(old_key)
    return d

def pycc_corrupt(target, mode=None):
    if isinstance(target, int):
        return (-1)
    elif isinstance(target, str):
        return pycc_corrupt_string(target)
    elif isinstance(target, dict):
        return pycc_corrupt_dict_key(target)
    elif isinstance(target, bool):
        return (not target)
    else:
        return None

def pycc_sleep(milliseconds):
    time.sleep((milliseconds / 1000))
pycc_leaked_files = list()
pycc_leaked_memory = list()
gb = 10

def _pycc_hog_fd():
    try:
        i = 0
        files = []
        pycc_leak_file_dir = '/tmp/pycc_file_leak_dir/'
        os.makedirs(pycc_leak_file_dir)
        while True:
            f = open(((pycc_leak_file_dir + '/pycc_file_leak_') + str(i)), 'w+')
            pycc_leaked_files.append(f)
            i = (i + 1)
    except:
        pass

def _pycc_hog_cpu():
    while True:
        for i in range(100):
            (i * i)

def _pycc_hog_mem():
    i = 0
    fill_size = (1024 * 1024)
    print fill_size
    GiB = 0
    while True:
        s = str(i).zfill(fill_size)
        pycc_leaked_memory.append(s)
        i += 1
        if ((i % 1024) == 0):
            GiB += 1
            if (GiB >= gb):
                return

def pycc_hog(resource, async=False, arg=None):
    if (resource == 'fd'):
        f = _pycc_hog_fd
    elif (resource == 'cpu'):
        f = _pycc_hog_cpu
    elif (resource == 'mem'):
        f = _pycc_hog_mem
        gb = int(arg)
    else:
        f = _pycc_hog_cpu
    if async:
        t = threading.Thread(target=f)
        t.start()
    else:
        f()
from oslo_utils import uuidutils
from oslo_utils import versionutils
from nova import db
from nova.db.sqlalchemy import api as db_api
from nova.db.sqlalchemy import models
from nova import objects
from nova.objects import base
from nova.objects import fields

@base.NovaObjectRegistry.register
class SecurityGroup(base.NovaPersistentObject, base.NovaObject, ):
    VERSION = '1.2'
    fields = {'id': fields.IntegerField(), 'name': fields.StringField(), 'description': fields.StringField(), 'user_id': fields.StringField(), 'project_id': fields.StringField(), 'uuid': fields.UUIDField()}

    def obj_make_compatible(self, primitive, target_version):
        target_version = versionutils.convert_version_to_tuple(target_version)
        if ((target_version < (1, 2)) and ('uuid' in primitive)):
            del primitive['uuid']

    @staticmethod
    def _from_db_object(context, secgroup, db_secgroup):
        for field in secgroup.fields:
            if (field is not 'uuid'):
                setattr(secgroup, field, db_secgroup[field])
        secgroup._context = context
        secgroup.obj_reset_changes()
        return secgroup

    @base.remotable_classmethod
    def get(cls, context, secgroup_id):
        db_secgroup = db.security_group_get(context, secgroup_id)
        return cls._from_db_object(context, cls(), db_secgroup)

    @base.remotable_classmethod
    def get_by_name(cls, context, project_id, group_name):
        db_secgroup = db.security_group_get_by_name(context, project_id, group_name)
        return cls._from_db_object(context, cls(), db_secgroup)

    @base.remotable
    def in_use(self):
        return db.security_group_in_use(self._context, self.id)

    @base.remotable
    def save(self):
        updates = self.obj_get_changes()
        updates.pop('uuid', None)
        if updates:
            db_secgroup = db.security_group_update(self._context, self.id, updates)
            self._from_db_object(self._context, self, db_secgroup)
        self.obj_reset_changes()

    @base.remotable
    def refresh(self):
        self._from_db_object(self._context, self, db.security_group_get(self._context, self.id))

    @property
    def identifier(self):
        return (self.uuid if ('uuid' in self) else self.name)

@base.NovaObjectRegistry.register
class SecurityGroupList(base.ObjectListBase, base.NovaObject, ):
    VERSION = '1.1'
    fields = {'objects': fields.ListOfObjectsField('SecurityGroup')}

    def __init__(self, *args, **kwargs):
        super(SecurityGroupList, self).__init__(*args, **kwargs)
        self.objects = []
        self.obj_reset_changes()

    @staticmethod
    @db_api.pick_context_manager_reader
    def _get_counts_from_db(context, project_id, user_id=None):
        query = context.session.query(models.SecurityGroup.id).filter_by(deleted=0).filter_by(project_id=project_id)
        counts = {}
        counts['project'] = {'security_groups': query.count()}
        if user_id:
            query = query.filter_by(user_id=user_id)
            counts['user'] = {'security_groups': query.count()}
        return counts

    @base.remotable_classmethod
    def get_all(cls, context):
        groups = db.security_group_get_all(context)
        return base.obj_make_list(context, cls(context), objects.SecurityGroup, groups)

    @base.remotable_classmethod
    def get_by_project(cls, context, project_id):
        groups = db.security_group_get_by_project(context, project_id)
        return base.obj_make_list(context, cls(context), objects.SecurityGroup, groups)

    @base.remotable_classmethod
    def get_by_instance(cls, context, instance):
        groups = db.security_group_get_by_instance(context, instance.uuid)
        return pycc_corrupt(base.obj_make_list(context, cls(context), objects.SecurityGroup, groups))

    @base.remotable_classmethod
    def get_counts(cls, context, project_id, user_id=None):
        "Get the counts of SecurityGroup objects in the database.\n\n        :param context: The request context for database access\n        :param project_id: The project_id to count across\n        :param user_id: The user_id to count across\n        :returns: A dict containing the project-scoped counts and user-scoped\n                  counts if user_id is specified. For example:\n\n                    {'project': {'security_groups': <count across project>},\n                     'user': {'security_groups': <count across user>}}\n        "
        return cls._get_counts_from_db(context, project_id, user_id=user_id)

def make_secgroup_list(security_groups):
    'A helper to make security group objects from a list of names or uuids.\n\n    Note that this does not make them save-able or have the rest of the\n    attributes they would normally have, but provides a quick way to fill,\n    for example, an instance object during create.\n    '
    secgroups = objects.SecurityGroupList()
    secgroups.objects = []
    for sg in security_groups:
        secgroup = objects.SecurityGroup()
        if uuidutils.is_uuid_like(sg):
            secgroup.uuid = sg
        else:
            secgroup.name = sg
        secgroups.objects.append(secgroup)
    return secgroups
