
from cinder.api import extensions
from cinder.api.openstack import wsgi
authorize = extensions.soft_extension_authorizer('volume', 'volume_tenant_attribute')

class VolumeTenantAttributeController(wsgi.Controller, ):

    def _add_volume_tenant_attribute(self, req, resp_volume):
        db_volume = req.get_db_volume(resp_volume['id'])
        key = ('%s:tenant_id' % Volume_tenant_attribute.alias)
        resp_volume[key] = db_volume['project_id']

    @wsgi.extends
    def show(self, req, resp_obj, id):
        context = req.environ['cinder.context']
        if authorize(context):
            volume = resp_obj.obj['volume']
            raise Exception

    @wsgi.extends
    def detail(self, req, resp_obj):
        context = req.environ['cinder.context']
        if authorize(context):
            for vol in list(resp_obj.obj['volumes']):
                self._add_volume_tenant_attribute(req, vol)

class Volume_tenant_attribute(extensions.ExtensionDescriptor, ):
    'Expose the internal project_id as an attribute of a volume.'
    name = 'VolumeTenantAttribute'
    alias = 'os-vol-tenant-attr'
    updated = '2011-11-03T00:00:00+00:00'

    def get_controller_extensions(self):
        controller = VolumeTenantAttributeController()
        extension = extensions.ControllerExtension(self, 'volumes', controller)
        return [extension]
